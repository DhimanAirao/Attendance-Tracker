
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800100  00800100  00000234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b22  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c5  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000399  00000000  00000000  000016ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001a88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058c  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a0  00000000  00000000  0000214c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	77 c0       	rjmp	.+238    	; 0x138 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 32       	cpi	r26, 0x2A	; 42
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	40 d0       	rcall	.+128    	; 0x12a <main>
  aa:	88 c0       	rjmp	.+272    	; 0x1bc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <_Z14uart_initalizej>:
	if(int(x)!= 13)
	{
		str[i++] = x;
		UART1_Rx_Str();
	}
	str[i] = '\0';
  ae:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  b2:	89 b9       	out	0x09, r24	; 9
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	86 e8       	ldi	r24, 0x86	; 134
  ba:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  be:	08 95       	ret

000000c0 <_Z16usart_recivedatav>:
  c0:	5f 9b       	sbis	0x0b, 7	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <_Z16usart_recivedatav>
  c4:	8c b1       	in	r24, 0x0c	; 12
  c6:	08 95       	ret

000000c8 <_Z18usart_transmitcharh>:
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <_Z18usart_transmitcharh>
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <_Z20usart_transmitstringPc>:
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
  d6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  de:	88 81       	ld	r24, Y
  e0:	88 23       	and	r24, r24
  e2:	81 f0       	breq	.+32     	; 0x104 <_Z20usart_transmitstringPc+0x34>
  e4:	f1 df       	rcall	.-30     	; 0xc8 <_Z18usart_transmitcharh>
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  f8:	fe 01       	movw	r30, r28
  fa:	e8 0f       	add	r30, r24
  fc:	f9 1f       	adc	r31, r25
  fe:	80 81       	ld	r24, Z
 100:	81 11       	cpse	r24, r1
 102:	f0 cf       	rjmp	.-32     	; 0xe4 <_Z20usart_transmitstringPc+0x14>
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <_Z19usart_comparestringv>:
}

void usart_comparestring(void)
{
	if(strcmp(previous,current)!=0)
 10a:	66 e1       	ldi	r22, 0x16	; 22
 10c:	71 e0       	ldi	r23, 0x01	; 1
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	44 d0       	rcall	.+136    	; 0x19c <strcmp>
 114:	89 2b       	or	r24, r25
 116:	41 f0       	breq	.+16     	; 0x128 <_Z19usart_comparestringv+0x1e>
	{
		usart_transmitstring(current);
 118:	86 e1       	ldi	r24, 0x16	; 22
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	d9 df       	rcall	.-78     	; 0xd0 <_Z20usart_transmitstringPc>
		strcpy(previous,current);
 11e:	66 e1       	ldi	r22, 0x16	; 22
 120:	71 e0       	ldi	r23, 0x01	; 1
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	43 c0       	rjmp	.+134    	; 0x1ae <strcpy>
 128:	08 95       	ret

0000012a <main>:
	UCSR0C =0b10000110;
}

void interrupt_enable(void)
{
	UCSR0B =0b10000000;
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	8a b9       	out	0x0a, r24	; 10


int main()
{
	interrupt_enable();
	sei();
 12e:	78 94       	sei
	uart_initalize(51);
 130:	83 e3       	ldi	r24, 0x33	; 51
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	bc df       	rcall	.-136    	; 0xae <_Z14uart_initalizej>
 136:	ff cf       	rjmp	.-2      	; 0x136 <main+0xc>

00000138 <__vector_18>:
	}
	
}

ISR (USART0_RX_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	0b b6       	in	r0, 0x3b	; 59
 144:	0f 92       	push	r0
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	char x ;
	int i=0;
	x=usart_recivedata();
 15e:	b0 df       	rcall	.-160    	; 0xc0 <_Z16usart_recivedatav>
 160:	e6 e1       	ldi	r30, 0x16	; 22
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	22 e2       	ldi	r18, 0x22	; 34
 166:	31 e0       	ldi	r19, 0x01	; 1
	while(i<12)
	{
		current[i++] = x;
 168:	81 93       	st	Z+, r24
ISR (USART0_RX_vect)
{
	char x ;
	int i=0;
	x=usart_recivedata();
	while(i<12)
 16a:	e2 17       	cp	r30, r18
 16c:	f3 07       	cpc	r31, r19
 16e:	e1 f7       	brne	.-8      	; 0x168 <__vector_18+0x30>
	{
		current[i++] = x;
	}
	
	current[i] = '\0';
 170:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <current+0xc>
	usart_comparestring();
 174:	ca df       	rcall	.-108    	; 0x10a <_Z19usart_comparestringv>
	
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0b be       	out	0x3b, r0	; 59
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <strcmp>:
 19c:	fb 01       	movw	r30, r22
 19e:	dc 01       	movw	r26, r24
 1a0:	8d 91       	ld	r24, X+
 1a2:	01 90       	ld	r0, Z+
 1a4:	80 19       	sub	r24, r0
 1a6:	01 10       	cpse	r0, r1
 1a8:	d9 f3       	breq	.-10     	; 0x1a0 <strcmp+0x4>
 1aa:	99 0b       	sbc	r25, r25
 1ac:	08 95       	ret

000001ae <strcpy>:
 1ae:	fb 01       	movw	r30, r22
 1b0:	dc 01       	movw	r26, r24
 1b2:	01 90       	ld	r0, Z+
 1b4:	0d 92       	st	X+, r0
 1b6:	00 20       	and	r0, r0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <strcpy+0x4>
 1ba:	08 95       	ret

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
